import cv2
import time
from .facefunction import load_facedata, process_frame, save_log, save_unknown_image

def run_face_recognition(timeout=3, log_path="log.xlsx", show_window=True):
    """
    Âü∑Ë°åËáâÈÉ®Ëæ®Ë≠ò‰∏ªÊµÅÁ®ãÔºàÊîùÂΩ±Ê©üÈñãÂïü„ÄÅÂç≥ÊôÇÊØîÂ∞ç„ÄÅÁ¥ÄÈåÑ LogÔºâ„ÄÇ

    Args:
        timeout (int): ÈÄöÈÅéÊàñÈôåÁîü‰∫∫ÂÅµÊ∏¨ÊåÅÁ∫åÊôÇÈñìÔºàÁßíÔºâ„ÄÇ
        log_path (str): Log Ê™îÂÑ≤Â≠ò‰ΩçÁΩÆ„ÄÇ
        show_window (bool): ÊòØÂê¶È°ØÁ§∫Âç≥ÊôÇÁï´Èù¢„ÄÇ

    Returns:
        name (str): ÊúÄÂæåËæ®Ë≠òÁµêÊûúÔºàUnknown, No face, Êàñ‰∫∫ÂêçÔºâ„ÄÇ
        frame (np.ndarray or None): Â∞çÊáâÁï´Èù¢ÂΩ±ÂÉèÔºåÂèØ‰æõÂÑ≤Â≠ò„ÄÇ
    """
    print("üîç [FaceRec] Loading known face vectors...")
    known_encodings, known_names = load_facedata()

    print("üì∑ [FaceRec] Starting camera...")
    cap = cv2.VideoCapture(0)

    state = {
        "elapsed": 0,
        "last_time": time.time(),
        "last_name": "No face",
        "recognized": False
    }

    last_frame = None
    current_name = "No face"

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        last_frame = frame.copy()
        frame, current_name = process_frame(frame, known_encodings, known_names, state)

        if show_window:
            cv2.imshow("Face Recognition", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                print("‚ùå [FaceRec] Manual quit")
                break

        # Â¶ÇÊûúÈÄöÈÅéÔºåÁ¥ÄÈåÑ Log
        if state["recognized"] and current_name not in ["Unknown", "No face"] and state["elapsed"] >= timeout:
            print(f"‚úÖ [FaceRec] Recognized: {current_name}")
            save_log(current_name, "Success", excel_path=log_path)
            cap.release()
            cv2.destroyAllWindows()
            return current_name, last_frame

        # Ëã•ÊòØÈôåÁîü‰∫∫ÂÅúÁïôÈÅé‰πÖÔºåÂÑ≤Â≠òÂúñÂÉèËàá Log
        if current_name == "Unknown" and state["elapsed"] >= timeout:
            print("‚ö†Ô∏è [FaceRec] Unknown timeout")
            save_log("Unknown", "Unknown", excel_path=log_path)
            if last_frame is not None:
                save_unknown_image(last_frame)
            cap.release()
            cv2.destroyAllWindows()
            return "Unknown", last_frame

    cap.release()
    cv2.destroyAllWindows()
    return "No face", None
